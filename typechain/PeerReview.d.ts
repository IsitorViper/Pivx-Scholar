/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PeerReviewInterface extends ethers.utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "createUser(string)": FunctionFragment;
    "fulfillCreateUser(bytes32,bool,string,uint256)": FunctionFragment;
    "getMyUser()": FunctionFragment;
    "getUser(address)": FunctionFragment;
    "getUsers()": FunctionFragment;
    "owner()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "users(uint256)": FunctionFragment;
    "usersMap(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "createUser", values: [string]): string;
  encodeFunctionData(
    functionFragment: "fulfillCreateUser",
    values: [BytesLike, boolean, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getMyUser", values?: undefined): string;
  encodeFunctionData(functionFragment: "getUser", values: [string]): string;
  encodeFunctionData(functionFragment: "getUsers", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "users", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "usersMap", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fulfillCreateUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMyUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUsers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usersMap", data: BytesLike): Result;

  events: {
    "ChainlinkCancelled(bytes32)": EventFragment;
    "ChainlinkFulfilled(bytes32)": EventFragment;
    "ChainlinkRequested(bytes32)": EventFragment;
    "OwnershipTransferRequested(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChainlinkCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type ChainlinkCancelledEvent = TypedEvent<[string] & { id: string }>;

export type ChainlinkFulfilledEvent = TypedEvent<[string] & { id: string }>;

export type ChainlinkRequestedEvent = TypedEvent<[string] & { id: string }>;

export type OwnershipTransferRequestedEvent = TypedEvent<
  [string, string] & { from: string; to: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { from: string; to: string }
>;

export class PeerReview extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PeerReviewInterface;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createUser(
      scholarUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfillCreateUser(
      _requestId: BytesLike,
      valid: boolean,
      user: string,
      trustRating: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMyUser(overrides?: CallOverrides): Promise<[string] & { user: string }>;

    getUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[string] & { user: string }>;

    getUsers(
      overrides?: CallOverrides
    ): Promise<[string[]] & { userList: string[] }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    users(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    usersMap(arg0: string, overrides?: CallOverrides): Promise<[string]>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createUser(
    scholarUrl: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfillCreateUser(
    _requestId: BytesLike,
    valid: boolean,
    user: string,
    trustRating: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMyUser(overrides?: CallOverrides): Promise<string>;

  getUser(_user: string, overrides?: CallOverrides): Promise<string>;

  getUsers(overrides?: CallOverrides): Promise<string[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  users(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  usersMap(arg0: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    createUser(scholarUrl: string, overrides?: CallOverrides): Promise<string>;

    fulfillCreateUser(
      _requestId: BytesLike,
      valid: boolean,
      user: string,
      trustRating: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getMyUser(overrides?: CallOverrides): Promise<string>;

    getUser(_user: string, overrides?: CallOverrides): Promise<string>;

    getUsers(overrides?: CallOverrides): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    transferOwnership(to: string, overrides?: CallOverrides): Promise<void>;

    users(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    usersMap(arg0: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ChainlinkCancelled(bytes32)"(
      id?: BytesLike | null
    ): TypedEventFilter<[string], { id: string }>;

    ChainlinkCancelled(
      id?: BytesLike | null
    ): TypedEventFilter<[string], { id: string }>;

    "ChainlinkFulfilled(bytes32)"(
      id?: BytesLike | null
    ): TypedEventFilter<[string], { id: string }>;

    ChainlinkFulfilled(
      id?: BytesLike | null
    ): TypedEventFilter<[string], { id: string }>;

    "ChainlinkRequested(bytes32)"(
      id?: BytesLike | null
    ): TypedEventFilter<[string], { id: string }>;

    ChainlinkRequested(
      id?: BytesLike | null
    ): TypedEventFilter<[string], { id: string }>;

    "OwnershipTransferRequested(address,address)"(
      from?: string | null,
      to?: string | null
    ): TypedEventFilter<[string, string], { from: string; to: string }>;

    OwnershipTransferRequested(
      from?: string | null,
      to?: string | null
    ): TypedEventFilter<[string, string], { from: string; to: string }>;

    "OwnershipTransferred(address,address)"(
      from?: string | null,
      to?: string | null
    ): TypedEventFilter<[string, string], { from: string; to: string }>;

    OwnershipTransferred(
      from?: string | null,
      to?: string | null
    ): TypedEventFilter<[string, string], { from: string; to: string }>;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createUser(
      scholarUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfillCreateUser(
      _requestId: BytesLike,
      valid: boolean,
      user: string,
      trustRating: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMyUser(overrides?: CallOverrides): Promise<BigNumber>;

    getUser(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getUsers(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    users(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    usersMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createUser(
      scholarUrl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfillCreateUser(
      _requestId: BytesLike,
      valid: boolean,
      user: string,
      trustRating: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMyUser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUser(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUsers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    users(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    usersMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
